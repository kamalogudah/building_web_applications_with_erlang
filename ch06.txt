chapter: WebSockets
==================
Example: socket.js

$(function ()
{ 
    var WebSocket = window.WebSocket || window.MozWebSocket;
    var socket = new WebSocket("ws://localhost:8081/websockets/basic_echo_callback.yaws");

    // wait for socket to open 
    socket.onopen = function ()
    {
        
        $('input#echo').on('keypress', function (event)
                           {
                               if ( event.which == 13 ) {
                                   event.preventDefault();
                                   var msg = $(this).val();

                                   socket.send(JSON.stringify(
                                       {
                                           message:msg
                                       }));
                               }
                           });
                                  
        socket.onmessage = function (msg)
        {
            var message = $.parseJSON(msg.data);
            var html    = $('div#messages').html() + message.message  + "<br>\n";
            $('div#messages').html(html);
          
        }
    }
});
    
    
====================================
Example: Upgrade header

	Upgrade: WebSocket
    
    
====================================
Example: Get upgrade header

is_websocket(#headers{other=L}) ->
    lists:foldl(fun({http_header,_,K0,_,V}, false) ->
                        K = case is_atom(K0) of
                                true ->
                                    atom_to_list(K0);
                                false ->
                                    K0
                            end,
                        case string:to_lower(K) of
                            "upgrade" ->
                                true;
                            _ ->
                                false
                        end;
                   (_, Acc) ->
                        Acc
                end, false, L).
    
    
====================================
Example: handle_message/1

-module(basic_echo_callback).

%% Export for websocket callbacks
-export([handle_message/1, say_hi/1]).


handle_message({text, Message}) ->
    io:format("~p:~p basic echo handler got ~p~n", 
	      [?MODULE, ?LINE, Message]),
    {reply, {text, <<Message/binary>>}}.

say_hi(Pid) ->
    io:format("asynchronous greeting~n", []),
    yaws_api:websocket_send(Pid, {text, <<"hi there!">>}).
    
    
====================================
Example: Setting up a WebSocket

<erl>

get_upgrade_header(#headers{other=L}) ->
    lists:foldl(fun({http_header,_,K0,_,V}, undefined) ->
                        K = case is_atom(K0) of
                                true ->
                                    atom_to_list(K0);
                                false ->
                                    K0
                            end,
                        case string:to_lower(K) of
                            "upgrade" ->
                                true;
                            _ ->
                                false
                        end;
                   (_, Acc) ->
                        Acc
                end, undefined, L).


%%--------------------------------------------------------------------------------
out(Arg) -> 
    case get_upgrade_header(Arg#arg.headers) of 
	true ->
	    error_logger:warning_msg("Not a web socket client~n"),
	    {content, "text/plain", "You're not a web sockets client! Go away!"};
	false ->
	    error_logger:info_msg("Starting web socket~n"),
	    {websocket, basic_echo_callback, []}
    end.

</erl>
    
    
====================================
Example: Log from a WebSocket

=INFO REPORT==== 13-Mar-2012::16:43:25 ===
Starting web socket
basic_echo_callback:10 basic echo handler got <<"{\"message\":\"This is a Test\"}">>
    
    
====================================
Example: Advanced WebSocket interface

%%%==============================================================
%%% compiled using erlc -I include src/advanced_echo_callback.erl
%%%==============================================================

-module(advanced_echo_callback).

-export([handle_message/2]).

-include("yaws_api.hrl").

%% define callback state to accumulate a fragmented WS message
%% which we echo back when all fragments are in, returning to
%% initial state.
-record(state, {frag_type = none,               % fragment type
                acc = <<>>}).                   % accumulate fragment data

%% start of a fragmented message
handle_message(#ws_frame_info{fin=0,
                              opcode=FragType,
                              data=Data},
               #state{frag_type=none, acc = <<>>}) ->
    {noreply, #state{frag_type=FragType, acc=Data}};

%% non-final continuation of a fragmented message
handle_message(#ws_frame_info{fin=0,
			      opcode=continuation,
                              data=Data},
               #state{frag_type = FragType, acc = Acc}) ->
    {noreply, #state{frag_type=FragType, acc = <<Acc/binary,Data/binary>>}};

%% end of text fragmented message
handle_message(#ws_frame_info{fin=1,
                              opcode=continuation,
                              data=Data},
               #state{frag_type=text, acc=Acc}) ->
    Unfragged = <<Acc/binary, Data/binary>>,
    {reply, {text, Unfragged}, #state{frag_type=none, acc = <<>>}};

%% one full non-fragmented message
handle_message(#ws_frame_info{opcode=text, data=Data}, State) ->
    {reply, {text, Data}, State};

%% end of binary fragmented message
handle_message(#ws_frame_info{fin=1,
                              opcode=continuation,
                              data=Data},
               #state{frag_type=binary, acc=Acc}) ->
    Unfragged = <<Acc/binary, Data/binary>>,
    io:format("echoing back binary message~n",[]),
    {reply, {binary, Unfragged}, #state{frag_type=none, acc = <<>>}};

%% one full non-fragmented binary message
handle_message(#ws_frame_info{opcode=binary,
                              data=Data},
               State) ->
    io:format("echoing back binary message~n",[]),
    {reply, {binary, Data}, State};

handle_message(#ws_frame_info{opcode=ping,
                              data=Data},
               State) ->
    io:format("replying pong to ping~n",[]),
    {reply, {pong, Data}, State};

handle_message(#ws_frame_info{opcode=pong}, State) ->
    %% A response to an unsolicited pong frame is not expected.
    %% http://tools.ietf.org/html/\
    %%            draft-ietf-hybi-thewebsocketprotocol-08#section-4
    io:format("ignoring unsolicited pong~n",[]),
    {noreply, State};

handle_message(#ws_frame_info{}=FrameInfo, State) ->
    io:format("WS Endpoint Unhandled message: ~p~n~p~n", [FrameInfo, State]),
    {close, {error, {unhandled_message, FrameInfo}}}.
    
    
==================