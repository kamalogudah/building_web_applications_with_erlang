chapter: File Upload
==================
      curl -F radio=@large_audio_file.mp3 http://localhost:8081/upload.yaws
    
    
====================================
Example: Repeated upload requests

<erl>
multipart(Arg, State) ->
    Parse = yaws_api:parse_multipart_post(Arg),
    case Parse of
        [] -> ok;
        {cont, Content, Res} ->
            case nextChunk(Arg, Res, State) of
                {done, Result} ->
                    Result;
                {cont, NewState} ->
                    {get_more, Content, NewState}
            end;
        {result, Res} ->
            case nextChunk(Arg, Res, State#upload{last=true}) of
                {done, Result} ->
                    Result;
                {cont, _} ->
                    err()
            end
    end.

out(A) when A#arg.state == undefined ->
    State = #upload{},
    multipart(A, State);
out(A) ->
    multipart(A, A#arg.state).
</erl>
    
    
====================================
Example: Multipart

multipart(Arg, State) ->
    Parse = yaws_api:parse_multipart_post(Arg),
    case Parse of
        [] -> ok;
        {cont, Content, Res} ->
            case nextChunk(Arg, Res, State) of
                {done, Result} ->
                    Result;
                {cont, NewState} ->
                    {get_more, Content, NewState}
            end;
        {result, Res} ->
            case nextChunk(Arg, Res, State#upload{last=true}) of
                {done, Result} ->
                    Result;
                {cont, _} ->
                    err()
            end
    end.
    
    
====================================
Example: Save file upload

writeToDisk(A, [{part_body, Data}|Res], State) ->
    writeToDisk(A, [{body, Data}|Res], State);

writeToDisk(_A, [], State) when State#upload.last==true,
                                 State#upload.filename /= undefined,
                                 State#upload.fd /= undefined ->
    file:close(State#upload.fd),
    upload_callback(State),
    Res= {html, "Done"},
    {done, Res};

writeToDisk(A, [], State) when State#upload.last==true ->
    {done, err()};

writeToDisk(_A, [], State) ->
    {cont, State};


writeToDisk(A, [{head, {_Name, Opts}}|Res], State ) ->
    case lists:keysearch(filename, 1, Opts) of
        {value, {_, Fname0}} ->
            Fname = yaws_api:sanitize_file_name(basename(Fname0)),
	    TargetDir = "/tmp",
	    file:make_dir(TargetDir),
	    case file:open([TargetDir, Fname] ,[write]) of
		{ok, Fd} ->
		    S2 = State#upload{filename = Fname,
				      fd = Fd},
		    writeToDisk(A, Res, S2);
		Err ->
		    {done, err()}
	    end;
	false ->
            writeToDisk(A,Res,State)
    end;


writeToDisk(A, [{body, Data}|Res], State)
  when State#upload.filename /= undefined ->
    case file:write(State#upload.fd, Data) of
        ok ->
            writeToDisk(A, Res, State);
        Err ->
            {done, err()}
    end.
    
    
====================================
Example: Complete upload code (upload.yaws)

<erl>

-record(upload, {
          fd,
          filename,
          last}).

-define(DIR, "/tmp/").

out(Arg) when Arg#arg.state == undefined ->
    State = #upload{},
    multipart(Arg, State);
out(Arg) ->
    multipart(Arg, Arg#arg.state).

err() ->
    {ehtml,
     {p, [], "error"}}.

multipart(Arg, State) ->
    Parse = yaws_api:parse_multipart_post(Arg),
    case Parse of
        [] -> ok;
        {cont, Cont, Res} ->
            case addFileChunk(Arg, Res, State) of
                {done, Result} ->
                    Result;
                {cont, NewState} ->
                    {get_more, Cont, NewState}
            end;
        {result, Res} ->
            case addFileChunk(Arg, Res, State#upload{last=true}) of
                {done, Result} ->
                    Result;
                {cont, _} ->
                    err()
            end
    end.

addFileChunk(Arg, [{part_body, Data}|Res], State) ->
    addFileChunk(Arg, [{body, Data}|Res], State);

addFileChunk(_Arg, [], State) when State#upload.last	== true,
                                 State#upload.filename	/= undefined,
                                 State#upload.fd	/= undefined ->

    file:close(State#upload.fd),
    Res = {ehtml,
           {p,[], "File upload done"}},
    {done, Res};

addFileChunk(Arg, [], State) when State#upload.last==true ->
    {done, err()};

addFileChunk(_Arg, [], State) ->
    {cont, State};

addFileChunk(Arg, [{head, {_Name, Opts}}|Res], State ) ->
    case lists:keysearch(filename, 1, Opts) of
        {value, {_, Fname0}} ->
            Fname = yaws_api:sanitize_file_name(basename(Fname0)),

            %% we must not put the file in the
            %% docroot, it may execute uploade code if the
            %% file is a .yaws file !!!!!
	    file:make_dir(?DIR),
	    case file:open([?DIR, Fname] ,[write]) of
		{ok, Fd} ->
		    S2 = State#upload{filename = Fname,
				      fd = Fd},
		    addFileChunk(Arg, Res, S2);
		Err ->
		    {done, err()}
	    end;
	false ->
            addFileChunk(Arg,Res,State)
    end;

addFileChunk(Arg, [{body, Data}|Res], State)
  when State#upload.filename /= undefined ->
    case file:write(State#upload.fd, Data) of
        ok ->
            addFileChunk(Arg, Res, State);
        Err ->
            {done, err()}
    end.


basename(FilePath) ->
    case string:rchr(FilePath, $\\) of
        0 ->
            %% probably not a DOS name
            filename:basename(FilePath);
        N ->
            %% probably a DOS name, remove everything after last \
            basename(string:substr(FilePath, N+1))
    end.
</erl>
    
    
====================================
Example: Uploading to S3 (s3.erl)

-module(s3).

-define('ACCESS_KEY',           "********************").
-define('SECRET_ACCESS_KEY',    "****************************************").
-define('BUCKET',               "*************"). 

-export([upload/2, upload_file/2]).

upload_file(Key, Path) ->    
    {ok, Binary} = file:read_file(Path),
    upload(Key, Binary).

    
upload(Key, Value) ->
    erlcloud_ec2:configure(?ACCESS_KEY, ?SECRET_ACCESS_KEY),
    error_logger:info_msg("~p:~p Settng up AWS to S3 ~n", 
                          [?MODULE, ?LINE]),
    R = erlcloud_s3:put_object(?BUCKET, Key, Value, [], [{"Content-type", "image/jpeg"}]),
    error_logger:info_msg("~p:~p Uploaded File ~p to S3 ~n", 
                          [?MODULE, ?LINE, R]),
    {ok, R}.
    
    
====================================
      inets:start().
      ssl:start().
    
    
====================================
Example: Uploading to S3 shell wrapper (s3_upload)

#!/usr/bin/env escript
-export([main/1]).

main([Key, File_Name]) ->
    inets:start(),
    ssl:start(),
    s3:upload_file(Key, File_Name).
    
    
==================